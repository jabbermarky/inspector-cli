import { displayMessage } from './interactive-ui-utils.js';
import { GroundTruthStats } from './generate-stats.js';

/**
 * Display ground truth statistics to the user
 * Pure presentation function - handles formatting and display only
 * 
 * @param stats - Statistics object generated by generateGroundTruthStats
 * 
 * Display functions intentionally have console output side effects
 */
export function displayGroundTruthStats(stats: GroundTruthStats): void {
    // Handle error cases
    if (!stats.databaseExists) {
        displayMessage('❌ No ground truth database found');
        return;
    }

    if (stats.error) {
        displayMessage(`❌ Error: ${stats.error}`);
        return;
    }

    // Display header
    displayMessage(`\n📊 Ground Truth Statistics:`);
    displayMessage('═'.repeat(50));
    
    // Display basic info
    displayMessage(`   Total Sites: ${stats.totalSites}`);
    displayMessage(`   Last Updated: ${new Date(stats.lastUpdated).toLocaleString()}`);

    // Display CMS distribution
    displayMessage(`\n📈 CMS Distribution:`);
    const sortedCms = Object.entries(stats.cmsDistribution)
        .sort(([, a], [, b]) => b - a); // Sort by count descending
    
    if (sortedCms.length === 0) {
        displayMessage('   No CMS data available');
    } else {
        sortedCms.forEach(([cms, count]) => {
            const percentage = ((count / stats.totalSites) * 100).toFixed(1);
            displayMessage(`   ${cms.padEnd(12)} ${count} sites (${percentage}%)`);
        });
    }

    // Display version distribution
    displayMessage(`\n🔢 Version Distribution:`);
    const sortedVersions = Object.entries(stats.versionDistribution)
        .sort(([, a], [, b]) => Object.keys(b).length - Object.keys(a).length); // Sort by number of versions
    
    if (sortedVersions.length === 0) {
        displayMessage('   No version data available');
    } else {
        sortedVersions.forEach(([cms, versions]) => {
            displayMessage(`   ${cms}:`);
            const sortedCmsVersions = Object.entries(versions)
                .sort(([, a], [, b]) => b - a); // Sort by count descending
            
            sortedCmsVersions.forEach(([version, count]) => {
                displayMessage(`     v${version}: ${count} sites`);
            });
        });
    }
}

/**
 * Display summary statistics in a compact format
 * 
 * @param stats - Statistics object generated by generateGroundTruthStats
 */
export function displayStatsummary(stats: GroundTruthStats): void {
    if (!stats.databaseExists) {
        displayMessage('❌ No database');
        return;
    }

    if (stats.error) {
        displayMessage(`❌ Error: ${stats.error}`);
        return;
    }

    const topCms = Object.entries(stats.cmsDistribution)
        .sort(([, a], [, b]) => b - a)[0];
    
    if (topCms) {
        const [cms, count] = topCms;
        const percentage = ((count / stats.totalSites) * 100).toFixed(1);
        displayMessage(`📊 ${stats.totalSites} sites, ${percentage}% ${cms}`);
    } else {
        displayMessage(`📊 ${stats.totalSites} sites, no CMS data`);
    }
}