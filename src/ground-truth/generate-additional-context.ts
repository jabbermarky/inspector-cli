/**
 * Types for additional context data
 */
export interface AdditionalContextData {
    generator?: {
        content: string;
    };
    poweredBy?: string;
    counts: {
        scripts: number;
        stylesheets: number;
        htmlSizeKB: number;
    };
    detectedPatterns: Array<{
        name: string;
        pattern: string;
    }>;
}

/**
 * Generate additional context data from collected website data
 * Pure function - no side effects, just data processing
 * 
 * @param data - The collected website data
 * @returns Structured context data object
 */
export function generateAdditionalContext(data: any): AdditionalContextData {
    const context: AdditionalContextData = {
        counts: {
            scripts: 0,
            stylesheets: 0,
            htmlSizeKB: 0
        },
        detectedPatterns: []
    };

    // Extract generator meta tag
    const generator = data.metaTags?.find((tag: any) => tag.name === 'generator');
    if (generator?.content) {
        context.generator = {
            content: generator.content
        };
    }

    // Extract powered-by header
    const poweredBy = data.httpHeaders?.['x-powered-by'];
    if (poweredBy) {
        context.poweredBy = poweredBy;
    }

    // Calculate counts
    context.counts.scripts = data.scripts?.length || 0;
    context.counts.stylesheets = data.stylesheets?.length || 0;
    context.counts.htmlSizeKB = data.htmlContent ? 
        Number((data.htmlContent.length / 1024).toFixed(1)) : 0;

    // Detect technology patterns
    if (data.htmlContent) {
        const html = data.htmlContent.toLowerCase();
        const patterns = [
            { name: 'WordPress', pattern: 'wp-' },
            { name: 'Drupal', pattern: 'drupal' },
            { name: 'Joomla', pattern: 'joomla' },
            { name: 'jQuery', pattern: 'jquery' },
            { name: 'React', pattern: 'react' },
            { name: 'Angular', pattern: 'angular' },
            { name: 'Vue', pattern: 'vue' },
        ];

        context.detectedPatterns = patterns.filter(p => html.includes(p.pattern));
    }

    return context;
}

/**
 * Check if there is any meaningful context data to display
 * 
 * @param context - Context data generated by generateAdditionalContext
 * @returns true if there's meaningful data to show
 */
export function hasAdditionalContext(context: AdditionalContextData): boolean {
    return !!(
        context.generator ||
        context.poweredBy ||
        context.counts.scripts > 0 ||
        context.counts.stylesheets > 0 ||
        context.counts.htmlSizeKB > 0 ||
        context.detectedPatterns.length > 0
    );
}