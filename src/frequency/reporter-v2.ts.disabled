import { writeFile } from 'fs/promises';
import { createModuleLogger } from '../utils/logger.js';
import type { FrequencyOptions } from './types/frequency-types-v2.js';
import type { AggregatedResults } from './types/analyzer-interface.js';
import { mapJsonReplacer } from './utils/map-converter.js';
import { convertForReporter, type ReporterCompatibleResult } from './v2-reporter-adapter.js';

const logger = createModuleLogger('frequency-reporter-v2');

/**
 * Format and output frequency analysis results (V2)
 */
export async function formatOutputV2(
    result: AggregatedResults,
    options: FrequencyOptions
): Promise<void> {
    logger.info('Formatting frequency analysis output V2', {
        output: options.output,
        outputFile: options.outputFile,
    });

    // Convert native V2 format to reporter-compatible format
    const reporterResult = convertForReporter(result);

    let outputContent: string;

    switch (options.output) {
        case 'json':
            outputContent = JSON.stringify(reporterResult, mapJsonReplacer, 2);
            break;

        case 'csv':
            outputContent = formatAsCSV(reporterResult);
            break;

        case 'markdown':
            outputContent = formatAsMarkdown(reporterResult);
            break;

        case 'human':
        default:
            outputContent = formatAsHuman(reporterResult);
            break;
    }

    if (options.outputFile) {
        await writeFile(options.outputFile, outputContent, 'utf-8');
        logger.info('Output written to file', { file: options.outputFile });
    } else {
        console.log(outputContent);
    }
}

/**
 * Format results as human-readable text
 */
function formatAsHuman(result: ReporterCompatibleResult): string {
    const lines: string[] = [];

    // Summary
    lines.push('='.repeat(60));
    lines.push('FREQUENCY ANALYSIS RESULTS');
    lines.push('='.repeat(60));
    lines.push(`Total Sites Analyzed: ${result.summary.totalSitesAnalyzed}`);
    lines.push(`Total Patterns Found: ${result.summary.totalPatternsFound}`);
    lines.push(`Analysis Date: ${result.summary.analysisDate}`);
    lines.push('');

    // Phase 1: Data Quality Filtering Report
    const filteringSection = formatFilteringReport(result, 'human');
    if (filteringSection) {
        lines.push(filteringSection);
    }

    // Phase 2: Enhanced Header Analysis
    const headersSection = formatHeadersSection(result, 'human');
    if (headersSection) {
        lines.push(headersSection);
    }

    // Phase 3: Meta Tags Analysis
    const metaTagsSection = formatMetaTagsSection(result, 'human');
    if (metaTagsSection) {
        lines.push(metaTagsSection);
    }

    // Phase 4: Script Pattern Analysis
    const scriptsSection = formatScriptPatternsSection(result, 'human');
    if (scriptsSection) {
        lines.push(scriptsSection);
    }

    // TODO: Bias Analysis (V2 Enhancement) - temporarily disabled during V1 adapter removal
    if (false && result.biasAnalysis) {
        lines.push('BIAS ANALYSIS:');
        lines.push('='.repeat(40));
        
        const bias = result.biasAnalysis;
        
        // Overall bias metrics
        lines.push(`Dataset Concentration Score: ${(bias.concentrationMetrics.herfindahlIndex * 100).toFixed(1)}%`);
        lines.push(`Overall Bias Risk: ${bias.concentrationMetrics.overallBiasRisk.toUpperCase()}`);
        lines.push(`Dominant Platforms: ${bias.cmsDistribution.dominantPlatforms.join(', ') || 'None'}`);
        lines.push('');
        
        // CMS Distribution
        lines.push('CMS Distribution:');
        lines.push('-'.repeat(20));
        for (const [cms, stats] of bias.cmsDistribution.distributions) {
            lines.push(`  ${cms}: ${stats.percentage.toFixed(1)}% (${stats.count} sites)`);
        }
        lines.push('');
        
        // Bias Warnings
        if (bias.biasWarnings.length > 0) {
            lines.push(`Bias Warnings (${bias.biasWarnings.length}):`);
            lines.push('-'.repeat(20));
            for (const warning of bias.biasWarnings.slice(0, 5)) { // Show top 5
                const severity = warning.severity.toUpperCase();
                lines.push(`  [${severity}] ${warning.message}`);
            }
            if (bias.biasWarnings.length > 5) {
                lines.push(`  ... and ${bias.biasWarnings.length - 5} more warnings`);
            }
            lines.push('');
        }
        
        // Cross-analyzer insights
        if (bias.technologyBias && bias.technologyBias.dominantVendors.length > 0) {
            lines.push('Technology Bias:');
            lines.push('-'.repeat(20));
            lines.push(`  Dominant Vendors: ${bias.technologyBias.dominantVendors.join(', ')}`);
            lines.push(`  Overall Risk: ${bias.technologyBias.overallTechnologyBias.toUpperCase()}`);
            lines.push('');
        }
        
        if (bias.semanticBias && bias.semanticBias.overrepresentedCategories.length > 0) {
            lines.push('Semantic Bias:');
            lines.push('-'.repeat(20));
            lines.push(`  Overrepresented: ${bias.semanticBias.overrepresentedCategories.join(', ')}`);
            lines.push(`  Underrepresented: ${bias.semanticBias.underrepresentedCategories.join(', ')}`);
            lines.push(`  Overall Risk: ${bias.semanticBias.overallSemanticBias.toUpperCase()}`);
            lines.push('');
        }
        
        // Statistical Summary
        if (bias.statisticalSummary.chiSquareResults) {
            lines.push('Statistical Validation:');
            lines.push('-'.repeat(20));
            lines.push(`  Statistically Significant Headers: ${bias.statisticalSummary.chiSquareResults.statisticallySignificantHeaders}`);
            lines.push(`  Average p-value: ${bias.statisticalSummary.chiSquareResults.averagePValue.toFixed(3)}`);
            if (bias.statisticalSummary.sampleSizeAdequacy) {
                const adequacy = bias.statisticalSummary.sampleSizeAdequacy;
                lines.push(`  Sample Size: ${adequacy.adequate} adequate, ${adequacy.marginal} marginal, ${adequacy.inadequate} inadequate`);
            }
            lines.push('');
        }
    }

    return lines.join('\n');
}

/**
 * Format results as CSV
 */
function formatAsCSV(result: ReporterCompatibleResult): string {
    const lines: string[] = [];
    
    // Phase 1: Data Quality Filtering Report (CSV format)
    const filteringSection = formatFilteringReport(result, 'csv');
    if (filteringSection) {
        lines.push('# Data Quality Filtering Statistics');
        lines.push(filteringSection);
    }
    
    // Headers CSV
    lines.push('Type,Pattern,Frequency,Occurrences,TotalSites');
    
    // Phase 2: Enhanced Header Analysis (CSV format)
    const headersSection = formatHeadersSection(result, 'csv');
    if (headersSection) {
        lines.push(headersSection);
    }
    
    // Phase 3: Meta Tags Analysis (CSV format)
    const metaTagsSection = formatMetaTagsSection(result, 'csv');
    if (metaTagsSection) {
        lines.push(metaTagsSection);
    }
    
    // Phase 4: Script Pattern Analysis (CSV format)
    const scriptsSection = formatScriptPatternsSection(result, 'csv');
    if (scriptsSection) {
        lines.push(scriptsSection);
    }
    
    // TODO: Bias Analysis CSV - temporarily disabled during V1 adapter removal
    if (false && result.biasAnalysis) {
        lines.push(''); // Separator
        lines.push('BiasType,Metric,Value,Details');
        
        const bias = result.biasAnalysis;
        
        // Overall metrics
        lines.push(`Overall,ConcentrationScore,${bias.concentrationMetrics.herfindahlIndex.toFixed(3)},Herfindahl-Hirschman Index`);
        lines.push(`Overall,BiasRisk,"${bias.concentrationMetrics.overallBiasRisk}",Risk Level`);
        
        // CMS Distribution
        for (const [cms, stats] of bias.cmsDistribution.distributions) {
            lines.push(`CMSDistribution,"${cms}",${stats.percentage.toFixed(3)},${stats.count} sites`);
        }
        
        // Bias Warnings
        for (const warning of bias.biasWarnings) {
            lines.push(`Warning,"${warning.type}","${warning.severity}","${warning.message.replace(/"/g, '""')}"`);
        }
        
        // Statistical Summary
        if (bias.statisticalSummary.chiSquareResults) {
            const chi = bias.statisticalSummary.chiSquareResults;
            lines.push(`Statistical,SignificantHeaders,${chi.statisticallySignificantHeaders},Count`);
            lines.push(`Statistical,AveragePValue,${chi.averagePValue.toFixed(6)},Statistical Significance`);
        }
    }
    
    return lines.join('\n');
}

/**
 * Phase 1: Format Data Quality & Filtering Report
 * 
 * @param result - The frequency analysis result
 * @param format - Output format ('human', 'markdown', 'csv')
 * @returns Formatted filtering report or empty string if no filtering data
 */
function formatFilteringReport(result: ReporterCompatibleResult, format: 'human' | 'markdown' | 'csv'): string {
    const filteringStats = result.summary.filteringStats;
    if (!filteringStats || filteringStats.sitesFiltered === 0) {
        return ''; // No filtering occurred, skip this section
    }

    const lines: string[] = [];

    switch (format) {
        case 'human': {
            lines.push('DATA QUALITY FILTERING:');
            lines.push('-'.repeat(40));
            lines.push(`Sites filtered out: ${filteringStats.sitesFiltered}`);
            lines.push(`Sites before filtering: ${filteringStats.sitesBeforeFiltering}`);
            lines.push(`Sites after filtering: ${filteringStats.sitesAfterFiltering}`);
            lines.push('');
            lines.push('Filter Reasons:');
            
            // Sort reasons by count (highest first)
            const sortedReasons = Object.entries(filteringStats.reasonsForFiltering)
                .filter(([, count]) => count > 0)
                .sort(([, a], [, b]) => b - a);
            
            for (const [reason, count] of sortedReasons) {
                lines.push(`  - ${reason}: ${count} sites`);
            }
            lines.push('');
            break;
        }

        case 'markdown': {
            lines.push('## Data Quality Filtering');
            lines.push('');
            lines.push(`**Sites filtered out:** ${filteringStats.sitesFiltered}`);
            lines.push(`**Sites before filtering:** ${filteringStats.sitesBeforeFiltering}`);
            lines.push(`**Sites after filtering:** ${filteringStats.sitesAfterFiltering}`);
            lines.push('');
            lines.push('### Filter Reasons');
            lines.push('');
            lines.push('| Reason | Sites Filtered |');
            lines.push('|--------|----------------|');
            
            // Sort reasons by count (highest first) 
            const sortedReasonsMarkdown = Object.entries(filteringStats.reasonsForFiltering)
                .filter(([, count]) => count > 0)
                .sort(([, a], [, b]) => b - a);
            
            for (const [reason, count] of sortedReasonsMarkdown) {
                lines.push(`| ${reason} | ${count} |`);
            }
            lines.push('');
            break;
        }

        case 'csv': {
            // CSV format is handled differently - this is included in the main CSV output
            lines.push('FilteringStatistic,Value,Description');
            lines.push(`SitesFiltered,${filteringStats.sitesFiltered},Total sites removed during filtering`);
            lines.push(`SitesBeforeFiltering,${filteringStats.sitesBeforeFiltering},Sites before any filtering applied`);
            lines.push(`SitesAfterFiltering,${filteringStats.sitesAfterFiltering},Sites remaining after filtering`);
            lines.push('');
            lines.push('FilterReason,SitesFiltered,Description');
            
            // Sort reasons by count for consistency
            const sortedReasonsCSV = Object.entries(filteringStats.reasonsForFiltering)
                .filter(([, count]) => count > 0)
                .sort(([, a], [, b]) => b - a);
            
            for (const [reason, count] of sortedReasonsCSV) {
                // Escape CSV values properly
                const escapedReason = `"${reason.replace(/"/g, '""')}"`;
                lines.push(`${escapedReason},${count},Sites filtered due to ${reason}`);
            }
            lines.push('');
            break;
        }
    }

    return lines.join('\n');
}

/**
 * Phase 2: Format Enhanced Header Analysis
 * 
 * @param result - The frequency analysis result
 * @param format - Output format ('human', 'markdown', 'csv')
 * @returns Formatted headers section or empty string if no headers
 */
function formatHeadersSection(result: ReporterCompatibleResult, format: 'human' | 'markdown' | 'csv'): string {
    const headerCount = Object.keys(result.headers).length;
    if (headerCount === 0) {
        return ''; // No headers to display
    }

    const lines: string[] = [];
    
    // Sort headers by frequency (highest first)
    const sortedHeaders = Object.entries(result.headers)
        .sort(([,a], [,b]) => b.frequency - a.frequency);

    switch (format) {
        case 'human': {
            lines.push(`HTTP HEADERS (${headerCount} patterns):`);
            lines.push('-'.repeat(40));
            
            // Show top 20 headers for human format
            const topHeaders = sortedHeaders.slice(0, 20);
            
            for (const [headerName, data] of topHeaders) {
                const freq = (data.frequency * 100).toFixed(1);
                const displayName = headerName.split(':')[0]; // Extract header name before colon
                
                lines.push(`### ${displayName}`);
                lines.push(`- Frequency: ${freq}% (${data.occurrences}/${data.totalSites} sites)`);
                lines.push(`- Unique Values: ${data.values?.length || 0}`);
                
                // Top value with precision handling
                if (data.values && data.values.length > 0) {
                    const topValue = data.values[0];
                    const topValuePercent = formatTopValuePercentage(topValue.frequency);
                    lines.push(`- Top Value: \`${topValue.value}\` (${topValuePercent})`);
                } else {
                    lines.push(`- Top Value: N/A`);
                }
                
                // Page distribution
                if (data.pageDistribution) {
                    const mainPercent = Math.round(data.pageDistribution.mainpage * 100);
                    const robotsPercent = Math.round(data.pageDistribution.robots * 100);
                    lines.push(`- Page Distribution: ${mainPercent}% main, ${robotsPercent}% robots`);
                }
                
                lines.push('');
            }
            break;
        }

        case 'markdown': {
            lines.push(`## HTTP Headers (${headerCount} patterns)`);
            lines.push('');
            lines.push('| Header | Frequency | Sites Using | Unique Values | Top Value | Top Value Usage | Page Distribution |');
            lines.push('|--------|-----------|-------------|---------------|-----------|-----------------|-------------------|');
            
            for (const [headerName, data] of sortedHeaders) {
                const freq = (data.frequency * 100).toFixed(1);
                const displayName = headerName.split(':')[0];
                const uniqueValues = data.values?.length || 0;
                
                // Top value with escaping
                let topValueDisplay = 'N/A';
                let topValuePercent = '0%';
                if (data.values && data.values.length > 0) {
                    const topValue = data.values[0];
                    topValueDisplay = escapeMarkdownTableCell(topValue.value);
                    topValuePercent = formatTopValuePercentage(topValue.frequency);
                }
                
                // Page distribution
                let pageDistDisplay = 'N/A';
                if (data.pageDistribution) {
                    const mainPercent = Math.round(data.pageDistribution.mainpage * 100);
                    const robotsPercent = Math.round(data.pageDistribution.robots * 100);
                    pageDistDisplay = `${mainPercent}% main, ${robotsPercent}% robots`;
                }
                
                lines.push(`| \`${displayName}\` | ${freq}% | ${data.occurrences}/${data.totalSites} | ${uniqueValues} | \`${topValueDisplay}\` | ${topValuePercent} | ${pageDistDisplay} |`);
            }
            lines.push('');
            break;
        }

        case 'csv': {
            lines.push('# HTTP Headers Analysis');
            lines.push('Header,Frequency,Occurrences,TotalSites,UniqueValues,TopValue,TopValueUsage,MainPagePercent,RobotsPercent');
            
            for (const [headerName, data] of sortedHeaders) {
                const displayName = headerName.split(':')[0];
                const uniqueValues = data.values?.length || 0;
                
                // Top value with CSV escaping
                let topValue = '';
                let topValuePercent = '0';
                if (data.values && data.values.length > 0) {
                    const top = data.values[0];
                    topValue = `"${top.value.replace(/"/g, '""')}"`;
                    topValuePercent = (top.frequency * 100).toFixed(3);
                }
                
                // Page distribution
                let mainPercent = '';
                let robotsPercent = '';
                if (data.pageDistribution) {
                    mainPercent = (data.pageDistribution.mainpage * 100).toFixed(1);
                    robotsPercent = (data.pageDistribution.robots * 100).toFixed(1);
                }
                
                const escapedHeader = `"${displayName.replace(/"/g, '""')}"`;
                lines.push(`${escapedHeader},${data.frequency.toFixed(6)},${data.occurrences},${data.totalSites},${uniqueValues},${topValue},${topValuePercent},${mainPercent},${robotsPercent}`);
            }
            lines.push('');
            break;
        }
    }

    return lines.join('\n');
}

/**
 * Format top value percentage with precision handling
 * Handles <0.1%, 0.1%-1%, >1% cases as per V1 requirements
 */
function formatTopValuePercentage(frequency: number): string {
    const rawPercent = frequency * 100;
    
    if (rawPercent >= 1) {
        return `${Math.round(rawPercent)}%`;
    } else if (rawPercent >= 0.1) {
        return `${rawPercent.toFixed(1)}%`;
    } else if (rawPercent > 0) {
        return '<0.1%';
    } else {
        return '0%';
    }
}

/**
 * Escape markdown table cell content (reuse from V1)
 */
function escapeMarkdownTableCell(text: string): string {
    if (!text) return '';
    // Escape pipes and trim for table cells
    return (
        text.replace(/\|/g, '\\|').replace(/\n/g, ' ').substring(0, 50) +
        (text.length > 50 ? '...' : '')
    );
}

/**
 * Phase 3: Format Meta Tags Analysis
 * 
 * @param result - The frequency analysis result
 * @param format - Output format ('human', 'markdown', 'csv')
 * @returns Formatted meta tags section or empty string if no meta tags
 */
function formatMetaTagsSection(result: ReporterCompatibleResult, format: 'human' | 'markdown' | 'csv'): string {
    const metaTagCount = Object.keys(result.metaTags).length;
    if (metaTagCount === 0) {
        return ''; // No meta tags to display
    }

    const lines: string[] = [];
    
    // Sort meta tags by frequency (highest first)
    const sortedMetaTags = Object.entries(result.metaTags)
        .sort(([,a], [,b]) => b.frequency - a.frequency);

    switch (format) {
        case 'human': {
            lines.push(`META TAGS (${metaTagCount} patterns):`);
            lines.push('-'.repeat(40));
            
            // Show top 15 meta tags for human format (as per V1)
            const topMetaTags = sortedMetaTags.slice(0, 15);
            
            for (const [tagKey, data] of topMetaTags) {
                const freq = Math.round(data.frequency * 100);
                
                lines.push(`### ${tagKey}`);
                lines.push(`- Frequency: ${freq}% (${data.occurrences}/${data.totalSites} sites)`);
                lines.push(`- Unique Values: ${data.values?.length || 0}`);
                lines.push('');
                lines.push('Top Values:');
                
                // Show top 5 values for each tag (as per V1)
                if (data.values && data.values.length > 0) {
                    const topValues = data.values.slice(0, 5);
                    for (const value of topValues) {
                        const valueFreq = Math.round(value.frequency * 100);
                        lines.push(`  - \`${value.value}\`: ${valueFreq}% (${value.occurrences} sites)`);
                    }
                } else {
                    lines.push('  - No values available');
                }
                
                lines.push('');
            }
            break;
        }

        case 'markdown': {
            lines.push(`## Meta Tags (${metaTagCount} patterns)`);
            lines.push('');
            lines.push('*Each meta tag type may have multiple values. Table shows frequency of each type across all sites.*');
            lines.push('');
            lines.push('| Meta Tag | Frequency | Sites Using | Unique Values | Top Value | Top Value Usage |');
            lines.push('|----------|-----------|-------------|---------------|-----------|-----------------|');
            
            for (const [tagKey, data] of sortedMetaTags) {
                const freq = (data.frequency * 100).toFixed(1);
                const uniqueValues = data.values?.length || 0;
                
                // Top value with escaping
                let topValueDisplay = 'N/A';
                let topValuePercent = '0%';
                if (data.values && data.values.length > 0) {
                    const topValue = data.values[0];
                    topValueDisplay = escapeMarkdownTableCell(topValue.value);
                    topValuePercent = `${Math.round(topValue.frequency * 100)}%`;
                }
                
                lines.push(`| \`${tagKey}\` | ${freq}% | ${data.occurrences}/${data.totalSites} | ${uniqueValues} | \`${topValueDisplay}\` | ${topValuePercent} |`);
            }
            lines.push('');
            break;
        }

        case 'csv': {
            lines.push('# Meta Tags Analysis');
            lines.push('MetaTag,Frequency,Occurrences,TotalSites,UniqueValues,TopValue,TopValueUsage');
            
            for (const [tagKey, data] of sortedMetaTags) {
                const uniqueValues = data.values?.length || 0;
                
                // Top value with CSV escaping
                let topValue = '';
                let topValuePercent = '0';
                if (data.values && data.values.length > 0) {
                    const top = data.values[0];
                    topValue = `"${top.value.replace(/"/g, '""')}"`;
                    topValuePercent = (top.frequency * 100).toFixed(3);
                }
                
                const escapedTag = `"${tagKey.replace(/"/g, '""')}"`;
                lines.push(`${escapedTag},${data.frequency.toFixed(6)},${data.occurrences},${data.totalSites},${uniqueValues},${topValue},${topValuePercent}`);
            }
            lines.push('');
            break;
        }
    }

    return lines.join('\n');
}

/**
 * Phase 4: Format Script Pattern Analysis with Classification
 * 
 * @param result - The frequency analysis result
 * @param format - Output format ('human', 'markdown', 'csv')
 * @returns Formatted script patterns section or empty string if no scripts
 */
function formatScriptPatternsSection(result: ReporterCompatibleResult, format: 'human' | 'markdown' | 'csv'): string {
    const scriptCount = Object.keys(result.scripts).length;
    if (scriptCount === 0) {
        return ''; // No scripts to display
    }

    const lines: string[] = [];
    
    // Classification system (from V1)
    const classifications = {
        path: {
            title: 'Path Patterns',
            description: 'Script locations that indicate CMS structure, platform architecture, or organizational patterns.'
        },
        library: {
            title: 'JavaScript Libraries',
            description: 'Popular JavaScript libraries and frameworks detected across sites.'
        },
        tracking: {
            title: 'Analytics & Tracking',
            description: 'Analytics platforms, marketing pixels, and user tracking technologies.'
        },
        script: {
            title: 'Script Characteristics',
            description: 'Technical attributes and optimization patterns of JavaScript files.'
        },
        inline: {
            title: 'Inline Script Patterns',
            description: 'Common patterns found in inline JavaScript code embedded in HTML.'
        },
        domain: {
            title: 'CDN & External Domains',
            description: 'Content delivery networks and external script hosting services.'
        }
    };

    // Classification mapping (from V1)
    const scriptClassificationMap: Record<string, string> = {
        'inline-script': 'inline',
        'google-analytics': 'tracking',
        'facebook-pixel': 'tracking',
        'cdn-usage': 'domain',
        'jquery': 'library',
        'jquery-inline': 'library',
        'wordpress-scripts': 'path',
        'bootstrap': 'library',
        'react': 'library'
    };

    // Group scripts by classification
    const groupedScripts = new Map<string, Array<[string, { frequency: number; occurrences: number; totalSites: number; examples: string[] }]>>();

    for (const [pattern, data] of Object.entries(result.scripts)) {
        // Handle prefix-based patterns (e.g., 'path:wp-content' -> 'path')
        let classification = scriptClassificationMap[pattern];
        if (!classification && pattern.includes(':')) {
            const prefix = pattern.split(':')[0];
            if (Object.keys(classifications).includes(prefix)) {
                classification = prefix;
            }
        }
        classification = classification || 'other';

        if (!groupedScripts.has(classification)) {
            groupedScripts.set(classification, []);
        }
        groupedScripts.get(classification)!.push([pattern, data]);
    }

    // Sort each group by frequency
    for (const [_prefix, patterns] of groupedScripts.entries()) {
        patterns.sort(([, a], [, b]) => b.frequency - a.frequency);
    }

    switch (format) {
        case 'human': {
            lines.push(`SCRIPT PATTERNS (${scriptCount} patterns):`);
            lines.push('='.repeat(50));
            
            // Generate sections for each classification that has patterns
            for (const [prefix, config] of Object.entries(classifications)) {
                const patterns = groupedScripts.get(prefix);
                if (!patterns || patterns.length === 0) continue;

                lines.push('');
                lines.push(`### ${config.title}`);
                lines.push(`*${config.description}*`);
                lines.push('-'.repeat(40));
                
                // Show top 15 patterns per category
                for (const [pattern, data] of patterns.slice(0, 15)) {
                    const freq = (data.frequency * 100).toFixed(1);
                    // Remove prefix from pattern display (e.g., 'path:wp-content' -> 'wp-content')
                    const patternDisplay = pattern.includes(':') ? pattern.split(':')[1] : pattern;
                    
                    lines.push(`**${patternDisplay}**: ${freq}% (${data.occurrences}/${data.totalSites} sites)`);
                    
                    // Show first example if available
                    if (data.examples && data.examples.length > 0) {
                        const example = formatScriptExample(data.examples[0]);
                        lines.push(`  Example: ${example}`);
                    }
                    lines.push('');
                }
            }
            
            // Summary
            const categoriesWithData = groupedScripts.size;
            lines.push(`**Summary:** ${scriptCount} total patterns across ${categoriesWithData} categories analyzed.`);
            lines.push('');
            break;
        }

        case 'markdown': {
            lines.push(`## Script Patterns (${scriptCount} patterns)`);
            lines.push('');
            
            // Generate tables for each classification that has patterns
            for (const [prefix, config] of Object.entries(classifications)) {
                const patterns = groupedScripts.get(prefix);
                if (!patterns || patterns.length === 0) continue;

                lines.push(`### ${config.title}`);
                lines.push('');
                lines.push(`*${config.description}*`);
                lines.push('');
                lines.push('| Pattern | Frequency | Sites Using | Example |');
                lines.push('|---------|-----------|-------------|---------|');
                
                // Show top 15 patterns per category
                for (const [pattern, data] of patterns.slice(0, 15)) {
                    const freq = (data.frequency * 100).toFixed(1);
                    // Remove prefix from pattern display
                    const patternDisplay = pattern.includes(':') ? pattern.split(':')[1] : pattern;
                    
                    const firstExample = data.examples && data.examples[0] 
                        ? formatScriptExampleForMarkdown(data.examples[0]) 
                        : 'N/A';
                    
                    lines.push(`| \`${patternDisplay}\` | ${freq}% | ${data.occurrences}/${data.totalSites} | ${firstExample} |`);
                }
                lines.push('');
            }
            
            // Summary
            const categoriesWithData = groupedScripts.size;
            lines.push(`**Summary:** ${scriptCount} total patterns across ${categoriesWithData} categories analyzed.`);
            lines.push('');
            break;
        }

        case 'csv': {
            lines.push('# Script Patterns Analysis');
            lines.push('Category,Pattern,Frequency,Occurrences,TotalSites,Example');
            
            // Generate CSV rows for all patterns, grouped by category
            for (const [prefix, config] of Object.entries(classifications)) {
                const patterns = groupedScripts.get(prefix);
                if (!patterns || patterns.length === 0) continue;

                for (const [pattern, data] of patterns) {
                    // Remove prefix from pattern display
                    const patternDisplay = pattern.includes(':') ? pattern.split(':')[1] : pattern;
                    
                    const example = data.examples && data.examples[0] 
                        ? `"${data.examples[0].replace(/"/g, '""')}"` 
                        : '';
                    
                    const escapedPattern = `"${patternDisplay.replace(/"/g, '""')}"`;
                    const escapedCategory = `"${config.title.replace(/"/g, '""')}"`;
                    
                    lines.push(`${escapedCategory},${escapedPattern},${data.frequency.toFixed(6)},${data.occurrences},${data.totalSites},${example}`);
                }
            }
            
            // Handle 'other' category if it exists
            const otherPatterns = groupedScripts.get('other');
            if (otherPatterns && otherPatterns.length > 0) {
                for (const [pattern, data] of otherPatterns) {
                    const example = data.examples && data.examples[0] 
                        ? `"${data.examples[0].replace(/"/g, '""')}"` 
                        : '';
                    
                    const escapedPattern = `"${pattern.replace(/"/g, '""')}"`;
                    
                    lines.push(`"Other",${escapedPattern},${data.frequency.toFixed(6)},${data.occurrences},${data.totalSites},${example}`);
                }
            }
            lines.push('');
            break;
        }
    }

    return lines.join('\n');
}

/**
 * Format script example for human-readable display
 */
function formatScriptExample(example: string): string {
    if (!example) return 'N/A';

    // Check if this contains HTML comments or CDATA that should be in a code block
    if (
        example.includes('<!--') ||
        example.includes('<![CDATA[') ||
        example.includes('Drupal.behaviors')
    ) {
        // For complex code, show just a summary and indicate it's code
        const summary = example.substring(0, 50).replace(/\n/g, ' ').trim();
        return `\`${summary}...\` (inline code)`;
    }

    // For simple examples, truncate for readability
    return example.length > 60 ? `${example.substring(0, 60)}...` : example;
}

/**
 * Format script example for markdown table cells
 */
function formatScriptExampleForMarkdown(example: string): string {
    if (!example) return 'N/A';

    // Check if this contains HTML comments or CDATA that should be in a code block
    if (
        example.includes('<!--') ||
        example.includes('<![CDATA[') ||
        example.includes('Drupal.behaviors')
    ) {
        // For table cells with complex code, show just a summary and indicate it's code
        const summary = example.substring(0, 30).replace(/\n/g, ' ').trim();
        return `\`${summary}...\` (inline code)`;
    }

    // For simple examples, escape and truncate for table cell
    return escapeMarkdownTableCell(example);
}

/**
 * Format results as Markdown
 */
function formatAsMarkdown(result: ReporterCompatibleResult): string {
    const lines: string[] = [];

    lines.push('# Frequency Analysis Results');
    lines.push('');
    lines.push(`- **Total Sites Analyzed:** ${result.summary.totalSitesAnalyzed}`);
    lines.push(`- **Total Patterns Found:** ${result.summary.totalPatternsFound}`);
    lines.push(`- **Analysis Date:** ${result.summary.analysisDate}`);
    lines.push('');

    // Phase 1: Data Quality Filtering Report
    const filteringSection = formatFilteringReport(result, 'markdown');
    if (filteringSection) {
        lines.push(filteringSection);
    }

    // Phase 2: Enhanced Header Analysis
    const headersSection = formatHeadersSection(result, 'markdown');
    if (headersSection) {
        lines.push(headersSection);
    }

    // Phase 3: Meta Tags Analysis
    const metaTagsSection = formatMetaTagsSection(result, 'markdown');
    if (metaTagsSection) {
        lines.push(metaTagsSection);
    }

    // Phase 4: Script Pattern Analysis
    const scriptsSection = formatScriptPatternsSection(result, 'markdown');
    if (scriptsSection) {
        lines.push(scriptsSection);
    }

    // TODO: Bias Analysis (Markdown) - temporarily disabled during V1 adapter removal
    if (false && result.biasAnalysis) {
        const bias = result.biasAnalysis;
        
        lines.push('## Bias Analysis');
        lines.push('');
        
        // Overview
        lines.push('### Overview');
        lines.push('');
        lines.push(`- **Dataset Concentration Score:** ${(bias.concentrationMetrics.herfindahlIndex * 100).toFixed(1)}%`);
        lines.push(`- **Overall Bias Risk:** ${bias.concentrationMetrics.overallBiasRisk}`);
        lines.push(`- **Dominant Platforms:** ${bias.cmsDistribution.dominantPlatforms.join(', ') || 'None'}`);
        lines.push('');
        
        // CMS Distribution
        lines.push('### CMS Distribution');
        lines.push('');
        lines.push('| CMS | Percentage | Sites |');
        lines.push('|-----|------------|-------|');
        
        const sortedCMS = Array.from(bias.cmsDistribution.distributions.entries())
            .sort(([,a], [,b]) => b.percentage - a.percentage);
            
        for (const [cms, stats] of sortedCMS) {
            lines.push(`| ${cms} | ${stats.percentage.toFixed(1)}% | ${stats.count} |`);
        }
        lines.push('');
        
        // Bias Warnings
        if (bias.biasWarnings.length > 0) {
            lines.push('### Bias Warnings');
            lines.push('');
            
            for (const warning of bias.biasWarnings) {
                const severity = warning.severity === 'critical' ? '🔴' : 
                               warning.severity === 'warning' ? '🟡' : 'ℹ️';
                lines.push(`${severity} **${warning.type.toUpperCase()}**: ${warning.message}`);
                lines.push('');
            }
        }
        
        // Cross-analyzer insights
        if (bias.technologyBias || bias.semanticBias) {
            lines.push('### Cross-Analyzer Insights');
            lines.push('');
            
            if (bias.technologyBias && bias.technologyBias.dominantVendors.length > 0) {
                lines.push('#### Technology Bias');
                lines.push(`- **Dominant Vendors:** ${bias.technologyBias.dominantVendors.join(', ')}`);
                lines.push(`- **Risk Level:** ${bias.technologyBias.overallTechnologyBias}`);
                lines.push('');
            }
            
            if (bias.semanticBias && bias.semanticBias.overrepresentedCategories.length > 0) {
                lines.push('#### Semantic Bias');
                lines.push(`- **Overrepresented Categories:** ${bias.semanticBias.overrepresentedCategories.join(', ')}`);
                lines.push(`- **Underrepresented Categories:** ${bias.semanticBias.underrepresentedCategories.join(', ')}`);
                lines.push(`- **Risk Level:** ${bias.semanticBias.overallSemanticBias}`);
                lines.push('');
            }
        }
        
        // Statistical Validation
        if (bias.statisticalSummary.chiSquareResults) {
            lines.push('### Statistical Validation');
            lines.push('');
            const chi = bias.statisticalSummary.chiSquareResults;
            lines.push(`- **Statistically Significant Headers:** ${chi.statisticallySignificantHeaders}`);
            lines.push(`- **Average p-value:** ${chi.averagePValue.toFixed(3)}`);
            
            if (bias.statisticalSummary.sampleSizeAdequacy) {
                const adequacy = bias.statisticalSummary.sampleSizeAdequacy;
                lines.push(`- **Sample Size Assessment:** ${adequacy.adequate} adequate, ${adequacy.marginal} marginal, ${adequacy.inadequate} inadequate`);
            }
            lines.push('');
        }
    }

    return lines.join('\n');
}